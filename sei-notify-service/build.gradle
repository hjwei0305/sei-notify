apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

// 扩展定义
ext {
    // 启动类
    MainClass = 'com.changhong.sei.notify.NotifyRestApplication'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    // 本项目依赖模块
    compile project(':sei-notify-api')
    // SEI平台依赖包
    compile("com.changhong.sei:sei-service-starter:$sei_version")
    compile("com.changhong.sei:sei-mq-starter:$sei_version")
    compile("com.changhong.sei:sei-edm-sdk:$sei_version")
    // 第三方组件依赖包
    compile("mysql:mysql-connector-java:$mysqlVersion")
    //
    compile("org.hibernate:hibernate-java8:5.3.7.Final")
    compile("org.springframework.boot:spring-boot-starter-mail")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    //微信集成SDK
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    compile (
            //公众号（包括订阅号和服务号）
            "com.github.binarywang:weixin-java-mp:4.2.0",
            //微信小程序
            "com.github.binarywang:weixin-java-miniapp:4.2.0",
    )

    compile(
            // 阿里云短消息
            "com.aliyun:dysmsapi20170525:2.0.9"
    )

    // 测试依赖包
    testImplementation(
            "com.changhong.sei:sei-test-starter:$sei_version"
    )
}

// 处理资源配置文件
processResources {
    // 替换bootstrap.yaml文件中@project_version@占位符的值
    filesMatching('bootstrap.yaml') {
        filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
                project_name       : project.property('name'),
                project_version    : project.property('version'),
                project_description: project.property('description')
        ]
    }
    // 默认application文件中的配置从配置中心获取
    excludes = ["**/application.yaml", "**/application.properties"]
}

// 打ar包
bootJar  {
    enabled = true
    archiveName = 'sei-notify.jar'
    mainClassName = MainClass
    manifest {
        attributes("Manifest-Version": "6.0")
        attributes("Created-By": "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString())
        attributes("Implementation-Title": "$project.rootProject.name")
        attributes("Implementation-Version": "$project.version")
        attributes("Implementation-Vendor": "rcsit.cn")
        attributes("Description": "$project.description")
        attributes("Build-Time": new Date().format("yyyy-MM-dd HH:mm:ss"))
    }
}

jar {
    enabled = true
    exclude('bootstrap.*')
    exclude('application.*')
    exclude('com/changhong/sei/notify/NotifyRestApplication.*')
    manifest {
        attributes("Manifest-Version": "6.0")
        attributes("Created-By": "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString())
        attributes("Implementation-Title": "$project.rootProject.name")
        attributes("Implementation-Version": "$project.version")
        attributes("Implementation-Vendor": "rcsit.cn")
        attributes("Description": "$project.description")
        attributes("Build-Time": new Date().format("yyyy-MM-dd HH:mm:ss"))
    }
}

/////////////////////////////////////上传Maven仓库////////////////////////////////////////
// 打包源代码
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

// 如果希望gradle install，安装到.m2本地仓库，参考下面的内容
install {
    repositories.mavenInstaller {
        pom.version = "$project.version"
        pom.artifactId = "$project.name"
        pom.groupId = "$project.group"
    }
}

//上传到nexus
uploadArchives {
    enabled = true
    repositories {
        mavenDeployer {
            repository(url: MAVEN_REPO_URL) {
                authentication(userName: NEXUS_USERNAME, password: NEXUS_PASSWORD)
            }
            pom.version = "$project.version"
            pom.artifactId = "$project.name"
            pom.groupId = "$project.group"
        }
    }
    return 'Success'
}
